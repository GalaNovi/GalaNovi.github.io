{"version":3,"sources":["Car/Car.module.scss","Car/Car.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","console","log","classes","Radium","props","inputClasses","input","name","push","green","red","length","bold","className","Car","style","border","boxShadow","cursor","year","type","onChange","onChangeName","value","join","onClick","onDelete","App","state","cars","pageTitle","showCars","toggleCarsHandler","setState","index","car","this","filter","i","map","key","evt","target","deleteHandler","bind","textAlign","width","margin","paddingTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,mBAAmB,MAAQ,mBAAmB,IAAM,iBAAiB,KAAO,oB,kPCG7HC,QAAQC,IAAIC,KAEZ,IAsCeC,eAtCH,SAACC,GACX,IAUMC,EAAe,CAACH,IAAQI,OAY9B,OAVIF,EAAMG,KACRF,EAAaG,KAAKN,IAAQO,OAE1BJ,EAAaG,KAAKN,IAAQQ,KAGxBN,EAAMG,KAAKI,OAAS,GACtBN,EAAaG,KAAKN,IAAQU,MAI1B,yBAAKC,UAAWX,IAAQY,IAAKC,MAvBjB,CACZC,OAAO,oBACPC,UAAU,kCACV,SAAU,CACRD,OAAO,oBACPC,UAAU,mCACVC,OAAO,aAkBP,yCAAed,EAAMG,MACrB,oCAAS,gCAASH,EAAMe,OACxB,2BACEC,KAAK,OACLC,SAAUjB,EAAMkB,aAChBC,MAAOnB,EAAMG,KACbM,UAAWR,EAAamB,KAAb,OAEb,4BAAQC,QAASrB,EAAMsB,UAAvB,cCoCSC,E,2MAtEbC,MAAQ,CACNC,KAAM,CACJ,CAACtB,KAAK,OAASY,KAAM,MACrB,CAACZ,KAAK,OAASY,KAAM,MACrB,CAACZ,KAAK,QAAUY,KAAM,OAExBW,UAAU,mBACVC,UAAU,G,EAgBZC,kBAAoB,WAClB,EAAKC,SAAS,CACZF,UAAW,EAAKH,MAAMG,Y,4EAfbxB,EAAM2B,GACjB,IAAMC,EAAMC,KAAKR,MAAMC,KAAKK,GAC5BC,EAAI5B,KAAOA,EACX,IAAMsB,EAAI,YAAOO,KAAKR,MAAMC,MAC5BA,EAAKK,GAASC,EACdC,KAAKH,SAAS,CAACJ,W,oCAGHK,GACZ,IAAML,EAAOO,KAAKR,MAAMC,KAAKQ,QAAO,SAACF,EAAKG,GAAN,OAAYA,IAAMJ,KACtDE,KAAKH,SAAS,CAACJ,W,+BASP,IAAD,OAKHA,EAAO,KAgBX,OAdIO,KAAKR,MAAMG,WACbF,EAAOO,KAAKR,MAAMC,KAAKU,KAAI,SAACJ,EAAKD,GAC/B,OACE,kBAAC,EAAD,CACEM,IAAKN,EACL3B,KAAM4B,EAAI5B,KACVY,KAAMgB,EAAIhB,KACVG,aAAc,SAACmB,GAAD,OAAS,EAAKnB,aAAamB,EAAIC,OAAOnB,MAAOW,IAC3DR,SAAU,EAAKiB,cAAcC,KAAK,EAAMV,SAO9C,yBAAKnB,MArBU,CACf8B,UAAU,WAqBR,yBAAKhC,UAAU,OACb,4BAAKuB,KAAKR,MAAME,WAEhB,4BAAQV,KAAK,SAASK,QAASW,KAAKJ,mBAApC,eAEA,yBAAKjB,MAAO,CACV+B,MAAO,IACPC,OAAO,OACPC,WAAY,KAEXnB,S,GA/DKoB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlE,QAAQkE,MAAMA,EAAMC,c","file":"static/js/main.abb32ed2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Car\":\"Car_Car__2Wtbh\",\"input\":\"Car_input__358Yl\",\"green\":\"Car_green__vhrN-\",\"red\":\"Car_red__3SQzt\",\"bold\":\"Car_bold__34hR0\"};","import React from 'react';\r\nimport classes from './Car.module.scss';\r\nimport Radium from 'radium';\r\n\r\nconsole.log(classes);\r\n\r\nconst Car = (props) => {\r\n  const style = {\r\n    border: `1px solid #cccccc`,\r\n    boxShadow: `0 4px 5px 0 rgba(0, 0, 0, 0.14)`,\r\n    ':hover': {\r\n      border: `1px solid #aaaaaa`,\r\n      boxShadow: `0 4px 15px 0 rgba(0, 0, 0, 0.25)`,\r\n      cursor: `pointer`\r\n    },\r\n  };\r\n\r\n  const inputClasses = [classes.input];\r\n\r\n  if (props.name) {\r\n    inputClasses.push(classes.green);\r\n  } else {\r\n    inputClasses.push(classes.red);\r\n  }\r\n\r\n  if (props.name.length > 4) {\r\n    inputClasses.push(classes.bold);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Car} style={style}>\r\n      <h3>Car name: {props.name}</h3>\r\n      <p>Year: <strong>{props.year}</strong></p>\r\n      <input\r\n        type=\"text\"\r\n        onChange={props.onChangeName}\r\n        value={props.name}\r\n        className={inputClasses.join(` `)}\r\n      />\r\n      <button onClick={props.onDelete}>Delete</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Radium(Car);\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Car from './Car/Car';\n\nclass App extends Component {\n  state = {\n    cars: [\n      {name: `Ford`, year: 2018},\n      {name: `Audi`, year: 2016},\n      {name: `Mazda`, year: 2010},\n    ],\n    pageTitle: `React Components`,\n    showCars: true,\n  };\n\n  onChangeName(name, index) {\n    const car = this.state.cars[index];\n    car.name = name;\n    const cars = [...this.state.cars];\n    cars[index] = car;\n    this.setState({cars});\n  };\n\n  deleteHandler(index) {\n    const cars = this.state.cars.filter((car, i) => i !== index);\n    this.setState({cars})\n  }\n\n  toggleCarsHandler = () => {\n    this.setState({\n      showCars: !this.state.showCars\n    });\n  }\n\n  render() {\n    const divStyle = {\n      textAlign: `center`\n    };\n\n    let cars = null;\n\n    if (this.state.showCars) {\n      cars = this.state.cars.map((car, index) => {\n        return (\n          <Car\n            key={index}\n            name={car.name}\n            year={car.year}\n            onChangeName={(evt) => this.onChangeName(evt.target.value, index)}\n            onDelete={this.deleteHandler.bind(this, index)}\n          />\n        );\n      })\n    }\n\n    return (\n      <div style={divStyle}>\n        <div className=\"App\">\n          <h1>{this.state.pageTitle}</h1>\n\n          <button type=\"button\" onClick={this.toggleCarsHandler}>Toggle Cars</button>\n\n          <div style={{\n            width: 400,\n            margin: `auto`,\n            paddingTop: 20,\n          }}>\n            {cars}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}